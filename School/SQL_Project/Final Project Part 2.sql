--Intermediate SQL Final Project, Part 2
--Adam Brewer

-- Question 1
ALTER TABLE DETAILRENTAL
ADD (DAYS_LATE NUMBER(3) AS (RETURN_DATE - DUE_DATE));

--Question 2
ALTER TABLE GAMECOPY
ADD (GA_STATUS VARCHAR2(4) DEFAULT 'IN' CHECK (GA_STATUS IN ('IN', 'OUT', 'LOST')));

--Question 3
UPDATE GAMECOPY
SET GA_STATUS = 'OUT'
WHERE EXISTS (SELECT * FROM DETAILRENTAL WHERE GAMECOPY.GC_NUM = DETAILRENTAL.GC_NUM AND RETURN_DATE IS NULL);

--Question 4
ALTER TABLE PRICE
ADD (RENT_DAYS NUMBER(2) DEFAULT 3 NOT NULL);

--Question 5
UPDATE PRICE
SET RENT_DAYS = CASE
WHEN PRICE_CODE = 1 THEN (5)
WHEN PRICE_CODE = 2 THEN (3)
WHEN PRICE_CODE = 3 THEN (5)
WHEN PRICE_CODE = 4 THEN (7) 
END;

--Question 6
SELECT G.GA_NUM, G.TITLE, COUNT(GC.GA_NUM)AS Inventory FROM GAME G
INNER JOIN GAMECOPY GC ON G.GA_NUM = GC.GA_NUM
GROUP BY GC.GA_NUM, G.GA_NUM, G.TITLE;

--Question 7
SELECT G.GA_NUM, G.TITLE, COUNT(GC.GA_NUM)AS Inventory FROM GAME G
INNER JOIN GAMECOPY GC ON G.GA_NUM = GC.GA_NUM
WHERE GC.GA_STATUS = 'IN' GROUP BY G.GA_NUM, G.TITLE;

--Question 8 
CREATE SEQUENCE SEQ_GAME_COPY
NOMINVALUE
NOMAXVALUE
START WITH 70000
INCREMENT BY 1;

CREATE SEQUENCE SEQ_RENT_NUM
NOMINVALUE
NOMAXVALUE
START WITH 1200
INCREMENT BY 1;

--Question 9
CREATE OR REPLACE PROCEDURE PRC_ADD_GAMECOPY(GAME_NUM GAMECOPY.GA_NUM%TYPE)
AS 
v_title game.title%TYPE;
v_count NUMBER;
v_newID NUMBER;

BEGIN
SELECT TITLE, COUNT(GA_NUM) INTO v_title, v_count FROM GAME WHERE GAME.GA_NUM = GAME_NUM GROUP BY TITLE;
SELECT SEQ_GAME_COPY.NEXTVAL INTO v_newID FROM DUAL;
IF v_count > 0 THEN 
INSERT INTO GAMECOPY VALUES (v_newID, SYSDATE, GAME_NUM, 'IN');
DBMS_OUTPUT.PUT_LINE('ADDED COPY NUMBER: ' || v_newID || ' for game - ' + v_title);
ELSE RAISE NO_DATA_FOUND;
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('No game found with number' || GAME_NUM);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('An error has occurred');
END;
/

--Question 10
CREATE OR REPLACE PROCEDURE PRC_MEM_INFO(MEMB_NUM MEMBERSHIP.MEM_NUM%TYPE)
AS
v_count NUMBER;
v_name VARCHAR2(100);
v_street MEMBERSHIP.STREET%TYPE;
v_postal MEMBERSHIP.POSTAL%TYPE;
BEGIN
SELECT (LNAME || ', ' ||FNAME), COUNT(MEM_NUM), STREET, POSTAL INTO v_name, v_count, v_street, v_postal FROM MEMBERSHIP WHERE MEM_NUM = MEMB_NUM GROUP BY MEM_NUM, (LNAME || ', ' ||FNAME), STREET, POSTAL;
IF v_count > 0 THEN 
DBMS_OUTPUT.PUT_LINE(v_name || chr(10) || v_street || chr(9) || v_postal);
ELSE RAISE NO_DATA_FOUND;
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO MATCHING MEMBERSHIP FOR ' || MEMB_NUM);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('An error has occurred');
END;
/

--Question 11
CREATE OR REPLACE PROCEDURE PRC_NEW_RENTAL(MEMB_NUM MEMBERSHIP.MEM_NUM%TYPE)
AS
v_balance NUMBER(5,2);
v_count NUMBER(2);
v_rentNew NUMBER(5);
BEGIN
SELECT BALANCE, COUNT(MEM_NUM) INTO v_balance, v_count FROM MEMBERSHIP WHERE MEM_NUM = MEMB_NUM GROUP BY BALANCE;
SELECT seq_rent_num.NEXTVAL INTO v_rentNew FROM DUAL;
IF v_count > 0 THEN
PRC_MEM_INFO(MEMB_NUM);
DBMS_OUTPUT.PUT_LINE('BALANCE: ' || chr(9) || v_balance);
INSERT INTO RENTAL VALUES (v_rentNew, SYSDATE, MEMB_NUM);
ELSE RAISE NO_DATA_FOUND;
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('NO MATCHING MEMBERSHIP FOR ' || MEMB_NUM);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('An error has occurred');
END;
/

--Question 12
CREATE OR REPLACE PROCEDURE PRC_NEW_DETAIL(GANUM GAME.GA_NUM%TYPE) 
AS
v_title VARCHAR2(100);
v_count NUMBER(2);
v_rent_fee NUMBER(4,2);
v_late_fee NUMBER(4,2);
v_rent_days NUMBER(3);
v_due_date DATE;
v_game_copy GAMECOPY.GC_NUM%TYPE;
v_rent_num RENTAL.RENT_NUM%TYPE;
ex_no_copies EXCEPTION;

BEGIN

ALTER SESSION SET NLS_DATE_FORMAT = 'YYY/MM/DD';
SELECT COUNT(GA_NUM) FROM GAME INTO v_count WHERE GA_NUM = GANUM;

IF v_count > 0 THEN

SELECT GC_NUM FROM GAMECOPY INTO v_game_copy WHERE GA_STATUS = 'IN' AND ROWNUM <=1;

SELECT G.TITLE FROM GAME G INNER JOIN GAMECOPY GC ON G.GA_NUM = GC.GA_NUM
INTO v_title WHERE v_game_copy = GC.GC_NUM;

SELECT P.RENT_FEE, P.DAILY_LATE_FEE, P.RENT_DAYS FROM PRICE P 
INNER JOIN GAME G ON P.PRICE_CODE = G.PRICE_CODE
INNER JOIN GAMECOPY GC ON G.GA_NUM = GC.GA_NUM
INTO v_rent_fee, v_late_fee, v_rent_days 
WHERE v_game_copy = GC.GC_NUM;

v_due_date := TO_DATE(SYSDATE + v_rent_days);

SELECT SEQ_RENT_NUM.NEXTVAL INTO v_rent_num FROM DUAL; 

INSERT INTO DETAILRENTAL VALUES (v_rent_num, GANUM, v_rent_fee, v_due_date, NULL, v_late_fee, NULL);

UPDATE GAMECOPY
SET GA_STATUS = 'OUT'
WHERE GC_NUM = v_game_copy;

DBMS_OUTPUT.PUT_LINE('RENTAL NUMBER:' || CHR(9) || '#' || v_rent_num || CHR(10) || CHR(10) || 'GAME COPY #' || v_game_copy ||
 CHR(9) || 'TITLE: ' || v_title || CHR(10) 'RENTAL FEE $' || v_rent_fee || CHR(9) 'LATE FEE $' || v_late_fee || 
 'DUE BACK IN ' || v_rent_days || ' - ' || v_due_date);

ELSE RAISE ex_no_copies;

END IF;

EXCEPTION
WHEN ex_no_copies THEN
DBMS_OUTPUT.PUT_LINE('NO COPIES AVAILABLE FOR ' || v_title);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('An error has occurred');
END;
/

--Question 14
CREATE OR REPLACE PROCEDURE PRC_NEW_DETAIL_V2(GANUM_1 GAME.GA_NUM%TYPE, GANUM_2 GAME.GA_NUM%TYPE = NULL, GANUM_3 GAME.GA_NUM%TYPE = NULL) 
AS
v_title VARCHAR2(100);
v_count NUMBER(2);
v_rent_fee NUMBER(4,2);
v_late_fee NUMBER(4,2);
v_rent_days NUMBER(3);
v_due_date DATE;
v_game_copy GAMECOPY.GC_NUM%TYPE;
v_rent_num RENTAL.RENT_NUM%TYPE;
ex_no_copies EXCEPTION;

BEGIN

ALTER SESSION SET NLS_DATE_FORMAT = 'YYY/MM/DD';
SELECT COUNT(GA_NUM) FROM GAME INTO v_count WHERE GA_NUM = GANUM;

IF v_count > 0 THEN

SELECT GC_NUM FROM GAMECOPY INTO v_game_copy WHERE GA_STATUS = 'IN' AND ROWNUM <=1;

SELECT G.TITLE FROM GAME G INNER JOIN GAMECOPY GC ON G.GA_NUM = GC.GA_NUM
INTO v_title WHERE v_game_copy = GC.GC_NUM;

SELECT P.RENT_FEE, P.DAILY_LATE_FEE, P.RENT_DAYS FROM PRICE P 
INNER JOIN GAME G ON P.PRICE_CODE = G.PRICE_CODE
INNER JOIN GAMECOPY GC ON G.GA_NUM = GC.GA_NUM
INTO v_rent_fee, v_late_fee, v_rent_days 
WHERE v_game_copy = GC.GC_NUM;

v_due_date := TO_DATE(SYSDATE + v_rent_days);

SELECT SEQ_RENT_NUM.NEXTVAL INTO v_rent_num FROM DUAL; 

INSERT INTO DETAILRENTAL VALUES (v_rent_num, GANUM, v_rent_fee, v_due_date, NULL, v_late_fee, NULL);

UPDATE GAMECOPY
SET GA_STATUS = 'OUT'
WHERE GC_NUM = v_game_copy;

DBMS_OUTPUT.PUT_LINE('RENTAL NUMBER:' || CHR(9) || '#' || v_rent_num || CHR(10) || CHR(10) || 'GAME COPY #' || v_game_copy ||
 CHR(9) || 'TITLE: ' || v_title || CHR(10) 'RENTAL FEE $' || v_rent_fee || CHR(9) 'LATE FEE $' || v_late_fee || 
 'DUE BACK IN ' || v_rent_days || ' - ' || v_due_date);

ELSE RAISE ex_no_copies;

END IF;

EXCEPTION
WHEN ex_no_copies THEN
DBMS_OUTPUT.PUT_LINE('NO COPIES AVAILABLE FOR ' || v_title);
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('An error has occurred');
END;
/

--Question 15
CREATE OR REPLACE PROCEDURE (GCNUM GAMECOPY.GC_NUM%TYPE)
AS
v_count NUMBER(2);
v_record NUMBER(2);
ex_no_copies EXCEPTION;
ex_not_found EXCEPTION;

BEGIN
SELECT COUNT(GC_NUM) FROM GAMECOPY INTO v_count WHERE GC_NUM = GCNUM; 

IF v_count > 0 THEN
SELECT COUNT(GC_NUM) FROM DETAILRENTAL INTO v_record WHERE GC_NUM = GCNUM AND RETURN_DATE = NULL; 
ELSE RAISE ex_not_found;
END IF;

IF v_record = 1 THEN
UPDATE GAMECOPY
SET GA_STATUS = 'IN' AND RETURN_DATE = SYSDATE
WHERE GC_NUM = GCNUM;
DBMS_OUTPUT.PUT_LINE('GAME SUCCESSFULLY RETURNED');
ELSE RAISE ex_no_copies;
END IF;

EXCEPTION
WHEN ex_no_copies THEN
DBMS_OUTPUT.PUT_LINE('NO COPIES AVAILABLE FOR RENTAL');
WHEN ex_not_found THEN
DBMS_OUTPUT.PUT_LINE('GAME COPY NUMBER DOES NOT EXIST IN THE DATABASE');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('An error has occurred');
END;
/





















